(()=>{"use strict";var t=[];function n(e,o){if(!o){for(var i=void 0;(i=n(e,!0))==t[t.length-1];);return t.push(i),i}return Math.floor(Math.random()*e)}const e=function(t){var n=this;t.split(": ").forEach((function(t,e){switch(e){case 0:n.symbol=t.trim();break;case 1:n.meaning=t.trim()}}))},o=function(){function t(){this.list=[]}return t.prototype.addWord=function(t){this.list.push(t)},t.prototype.getList=function(){return JSON.parse(JSON.stringify(this.list))},t.prototype.getItem=function(t){return this.list[t]},t}();const i=function(){function t(t){this._input=t}return t.prototype.interpret=function(){var t=new o;return this._input.split("\n").forEach((function(n){t.addWord(new e(n))})),t},t}();document.getElementById("textFileReader").onchange=function(t){var n=t.target.files[0],e=document.getElementById("output"),o=new FileReader;o.onload=function(t){var n,o;e.innerHTML=t.target.result,n=t.target.result,o=new i(n).interpret(),globalThis.model=o,u(document.getElementById("test")),r.click()},o.onerror=function(t){e.innerHTML="Cannot read the file"},o.readAsText(n)},globalThis.isShownOutput=!1;var r=document.getElementById("btnNext");function u(t){t.style.display="initial"}function l(t){t.style.display="none"}globalThis.aFunc=function(){console.log(t)},document.getElementById("btnStart").onclick=function(){document.getElementById("textFileReader").click()},document.getElementById("btnAnswer").onclick=function(){u(document.getElementById("answer"))},document.getElementById("btnNext").onclick=function(){var t,e=globalThis.model,o=n(e.getList().length,!1),i=e.getItem(o);t=i.meaning,document.getElementById("answer").innerHTML=t,function(t){document.getElementById("question").innerHTML=t}(i.symbol),l(document.getElementById("answer")),u(document.getElementById("btnAnswer"))},document.getElementById("toggle").onclick=function(){var t=document.getElementById("output");globalThis.isShownOutput?l(t):u(t),globalThis.isShownOutput=!globalThis.isShownOutput}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,